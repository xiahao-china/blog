const path = require("path");const {fileURLToPath, URL, pathToFileURL} = require("node:url");const {BundleAnalyzerPlugin} = require("webpack-bundle-analyzer");const postCssPxToRem = require("postcss-pxtorem");const autoprefixer = require("autoprefixer");const {VantResolver} = require("@vant/auto-import-resolver");const ComponentsPlugin = require("unplugin-vue-components/webpack");const VConsolePlugin = require("vconsole-webpack-plugin");const isAnalyze = process.env.OPTION_TYPE === "analyze";const isTest = process.env.OPTION_TYPE === "test";let serverConfig = {};try {    serverConfig = require("./serverConfig");} catch (err) {    console.log(err);}const pluginList = [    ComponentsPlugin({        resolvers: [VantResolver()]    }),    new VConsolePlugin({enable: isTest})];isAnalyze && pluginList.push(    new BundleAnalyzerPlugin());module.exports = {    // lintOnSave: false,    productionSourceMap: false,    configureWebpack: {        plugins: pluginList,        resolve: {            alias: {                src: fileURLToPath(new URL("./src", pathToFileURL(__filename)))            }        }    },    outputDir: path.join(__dirname, "./activityDist"),    chainWebpack: config => {        config.optimization.splitChunks({            cacheGroups: {                vendors: {                    name: "chunk-vendors",                    test: /[\\/]node_modules[\\/]/,                    priority: -10,                    chunks: "initial"                },                common: {                    name: "chunk-common",                    minChunks: 2,                    priority: -20,                    chunks: "initial",                    reuseExistingChunk: true                },                "weixin-js-sdk": {                    name: "weixin-js-sdk",                    chunks: "all",                    test: /weixin-js-sdk\/index\.js/,                    enforce: true                }            }        });        // 10k以下图片压缩以减少请求次数        config.module            .rule("images")            .use("url-loader")            .tap(options => {                options.limit = 1024 * 10;                return options;            });    },    css: {        loaderOptions: {            postcss: {                plugins: [                    postCssPxToRem({                        rootValue: 75, // 1rem的大小                        propList: ["*"], // 需要转换的属性，这里选择全部都进行转换                        selectorBlackList: ["__vconsole"],                        exclude: path.resolve(__dirname, "./node_modules")                    }),                    postCssPxToRem({                        rootValue: 37.5, // 1rem的大小                        propList: ["*"], // 需要转换的属性，这里选择全部都进行转换                        selectorBlackList: ["__vconsole"],                        exclude: path.resolve(__dirname, "./src")                    }),                    autoprefixer()                ]            },            less: {                charset: false,                additionalData: "@import \"./src/assets/globalStyle/reset.less\";",                javascriptEnabled: true /*这个可以解决less方法无法执行的问题*/,                rewriteUrls: "all" /*这个解决字体图标无法显示的问题*/            }        }    },    publicPath: "",    devServer: {        proxy: {            "/cdnQiniu": {                target: "http://wx.iyangyang.fun",                pathRewrite: {                    "^/cdnQiniu/": "/"                }            },            "/api/act": {                // target: 'http://47.98.209.159'                target: "http://test.iyangyang.fun",                // rewrite                pathRewrite: {                    "/api/act": "/act"                }            },            "/api": {                target: "http://47.98.209.159",                pathRewrite: { // 路径改写规则                    "^/api/": "/" // 以“^/xxx”为开头的改写为''/xxx                }            },            "/testEnvInitCookie": {                target: "http://localhost:8080/",                pathRewrite: { // 路径改写规则                    "/testEnvInitCookie": "/abc" // 以“^/xxx”为开头的改写为''/xxx                },                onProxyRes: function (proxyRes, req) {                    proxyRes.statusCode = 200;                    proxyRes.headers["set-cookie"] = [`uid=${serverConfig.mockUid};`, `ticket=${serverConfig.mockTicket};`];                }            },            "/": {                target: "http://47.98.209.159"            }        }    }};